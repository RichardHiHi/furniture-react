{"ast":null,"code":"import { LOAD_PRODUCTS, SET_LISTVIEW, SET_GRIDVIEW, UPDATE_SORT, SORT_PRODUCTS, UPDATE_FILTERS, FILTER_PRODUCTS, CLEAR_FILTERS } from '../actions';\n\nconst filter_reducer = (state, action) => {\n  let maxPrice = 0;\n\n  if (action.type === LOAD_PRODUCTS) {\n    const priceArray = action.payload.map(product => {\n      return product.price;\n    });\n    maxPrice = Math.max(...priceArray);\n    return { ...state,\n      filterProducts: action.payload,\n      products: action.payload,\n      filterValue: { ...state.filterValue,\n        maxPrice: maxPrice,\n        price: maxPrice\n      }\n    };\n  }\n\n  if (action.type === SET_GRIDVIEW) {\n    return { ...state,\n      view: 'GRID'\n    };\n  }\n\n  if (action.type === SET_LISTVIEW) {\n    return { ...state,\n      view: 'LIST'\n    };\n  }\n\n  if (action.type === UPDATE_SORT) {\n    return { ...state,\n      sortOption: action.payload\n    };\n  }\n\n  if (action.type === SORT_PRODUCTS) {\n    let sortedProducts = [...state.filterProducts];\n\n    switch (state.sortOption) {\n      case 'price-lowest':\n        console.log(state.sortOption);\n        sortedProducts = state.filterProducts.sort((a, b) => {\n          return a.price - b.price;\n        });\n        break;\n\n      case 'price-highest':\n        sortedProducts = state.filterProducts.sort((a, b) => {\n          return b.price - a.price;\n        });\n        break;\n\n      case 'name-a':\n        sortedProducts = state.filterProducts.sort((a, b) => {\n          return a.name.localeCompare(b.name);\n        });\n        break;\n\n      case 'name-z':\n        sortedProducts = state.filterProducts.sort((a, b) => {\n          return b.name.localeCompare(a.name);\n        });\n        break;\n    }\n\n    return { ...state,\n      filterProducts: sortedProducts\n    };\n  }\n\n  if (action.type === UPDATE_FILTERS) {\n    const {\n      name,\n      value\n    } = action.payload;\n    return { ...state,\n      filterValue: { ...state.filterValue,\n        [name]: value\n      }\n    };\n  }\n\n  if (action.type === FILTER_PRODUCTS) {\n    const {\n      text,\n      category,\n      colors,\n      shipping,\n      price,\n      company\n    } = state.filterValue;\n    let newProduct = [...state.products];\n\n    if (text) {\n      newProduct = newProduct.filter(product => {\n        return product.name.substring(0, text.length) === text;\n      });\n    }\n\n    if (category !== 'ALL') {\n      newProduct = newProduct.filter(product => {\n        return product.category === category;\n      });\n    }\n\n    if (company !== 'ALL') {\n      newProduct = newProduct.filter(product => {\n        return product.company === company;\n      });\n    }\n\n    if (colors !== 'ALL') {\n      const newProducts = newProduct.filter(product => {\n        return product.colors.some(item => item === colors);\n      });\n      newProduct = [...new Set(newProducts)];\n    }\n\n    if (shipping) {\n      newProduct = newProduct.filter(product => {\n        return product.shipping;\n      });\n    }\n\n    newProduct = newProduct.filter(product => {\n      return product.price < price;\n    });\n    return { ...state,\n      filterProducts: newProduct\n    };\n  }\n\n  if (action.type === CLEAR_FILTERS) {\n    return { ...state,\n      filterProducts: [...state.products],\n      filterValue: { ...state.filterValue,\n        text: '',\n        company: 'ALL',\n        category: 'ALL',\n        colors: 'ALL',\n        shipping: false,\n        price: state.filterValue.maxPrice\n      }\n    };\n  }\n\n  throw new Error(`No Matching \"${action.type}\" - action type`);\n};\n\nexport default filter_reducer;","map":{"version":3,"sources":["/home/thanh/react-course-comfy-sloth-starter/src/reducers/filter_reducer.js"],"names":["LOAD_PRODUCTS","SET_LISTVIEW","SET_GRIDVIEW","UPDATE_SORT","SORT_PRODUCTS","UPDATE_FILTERS","FILTER_PRODUCTS","CLEAR_FILTERS","filter_reducer","state","action","maxPrice","type","priceArray","payload","map","product","price","Math","max","filterProducts","products","filterValue","view","sortOption","sortedProducts","console","log","sort","a","b","name","localeCompare","value","text","category","colors","shipping","company","newProduct","filter","substring","length","newProducts","some","item","Set","Error"],"mappings":"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","sourcesContent":["import {\n  LOAD_PRODUCTS,\n  SET_LISTVIEW,\n  SET_GRIDVIEW,\n  UPDATE_SORT,\n  SORT_PRODUCTS,\n  UPDATE_FILTERS,\n  FILTER_PRODUCTS,\n  CLEAR_FILTERS,\n} from '../actions';\n\nconst filter_reducer = (state, action) => {\n  let maxPrice = 0;\n\n  if (action.type === LOAD_PRODUCTS) {\n    const priceArray = action.payload.map((product) => {\n      return product.price;\n    });\n    maxPrice = Math.max(...priceArray);\n    return {\n      ...state,\n      filterProducts: action.payload,\n      products: action.payload,\n      filterValue: {\n        ...state.filterValue,\n        maxPrice: maxPrice,\n        price: maxPrice,\n      },\n    };\n  }\n  if (action.type === SET_GRIDVIEW) {\n    return { ...state, view: 'GRID' };\n  }\n  if (action.type === SET_LISTVIEW) {\n    return { ...state, view: 'LIST' };\n  }\n  if (action.type === UPDATE_SORT) {\n    return {\n      ...state,\n      sortOption: action.payload,\n    };\n  }\n  if (action.type === SORT_PRODUCTS) {\n    let sortedProducts = [...state.filterProducts];\n\n    switch (state.sortOption) {\n      case 'price-lowest':\n        console.log(state.sortOption);\n        sortedProducts = state.filterProducts.sort((a, b) => {\n          return a.price - b.price;\n        });\n        break;\n      case 'price-highest':\n        sortedProducts = state.filterProducts.sort((a, b) => {\n          return b.price - a.price;\n        });\n        break;\n      case 'name-a':\n        sortedProducts = state.filterProducts.sort((a, b) => {\n          return a.name.localeCompare(b.name);\n        });\n        break;\n      case 'name-z':\n        sortedProducts = state.filterProducts.sort((a, b) => {\n          return b.name.localeCompare(a.name);\n        });\n        break;\n    }\n\n    return { ...state, filterProducts: sortedProducts };\n  }\n  if (action.type === UPDATE_FILTERS) {\n    const { name, value } = action.payload;\n    return {\n      ...state,\n      filterValue: { ...state.filterValue, [name]: value },\n    };\n  }\n  if (action.type === FILTER_PRODUCTS) {\n    const {\n      text,\n      category,\n      colors,\n      shipping,\n      price,\n      company,\n    } = state.filterValue;\n    let newProduct = [...state.products];\n    if (text) {\n      newProduct = newProduct.filter((product) => {\n        return product.name.substring(0, text.length) === text;\n      });\n    }\n    if (category !== 'ALL') {\n      newProduct = newProduct.filter((product) => {\n        return product.category === category;\n      });\n    }\n    if (company !== 'ALL') {\n      newProduct = newProduct.filter((product) => {\n        return product.company === company;\n      });\n    }\n    if (colors !== 'ALL') {\n      const newProducts = newProduct.filter((product) => {\n        return product.colors.some((item) => item === colors);\n      });\n      newProduct = [...new Set(newProducts)];\n    }\n    if (shipping) {\n      newProduct = newProduct.filter((product) => {\n        return product.shipping;\n      });\n    }\n\n    newProduct = newProduct.filter((product) => {\n      return product.price < price;\n    });\n\n    return { ...state, filterProducts: newProduct };\n  }\n  if (action.type === CLEAR_FILTERS) {\n    return {\n      ...state,\n      filterProducts: [...state.products],\n      filterValue: {\n        ...state.filterValue,\n        text: '',\n        company: 'ALL',\n        category: 'ALL',\n        colors: 'ALL',\n        shipping: false,\n        price: state.filterValue.maxPrice,\n      },\n    };\n  }\n  throw new Error(`No Matching \"${action.type}\" - action type`);\n};\n\nexport default filter_reducer;\n"]},"metadata":{},"sourceType":"module"}